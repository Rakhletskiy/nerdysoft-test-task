{"version":3,"sources":["reducers/auth.js","reducers/task-list.js","reducers/index.js","store.js","modules/auth/components/auth-title/index.js","helpers/notification.js","helpers/data/get-parsed-users.js","modules/auth/components/auth-btn/index.js","modules/auth/components/auth-switch-btn/index.js","modules/auth/components/auth-fields/index.js","actions/auth.js","helpers/data/reg-validation.js","modules/auth/index.js","modules/task-list/components/log-out/index.js","modules/task-list/components/share-task-block/index.js","helpers/data/share.js","modules/task-list/components/edit-card-block/index.js","modules/task-list/components/card/index.js","actions/task-list.js","modules/task-list/components/add-btn-block/index.js","modules/task-list/components/full-list/index.js","modules/task-list/index.js","components/task-list-app/index.js","index.js"],"names":["initialState","users","isAuth","currentUser","isRegister","currentTasks","combineReducers","auth","state","action","type","payload","taskList","tasks","store","createStore","reducers","AuthTitle","className","Message","props","style","color","message","openNotification","descr","isSuccess","notification","open","description","duration","icon","getParsedUsers","localStorage","getItem","JSON","parse","AuthBtn","loginText","password","confPassword","setLoginText","setPassword","setConfPassword","setValidatingField","setIsRegister","login","regNewUser","onClick","event","AuthSwitchBtn","e","connect","dispatch","preventDefault","setLogin","getState","haveThisLogin","tempArr","parsedData","lastUserId","length","id","forEach","item","newUser","isValid","isValidEmail","test","regValidate","push","setItem","stringify","fetchData","user","loginUser","useState","validatingField","useEffect","onChange","target","value","placeholder","LogOut","logOut","name","size","ShareTaskBlock","label","userId","taskIndex","setIsSharing","destinationEmail","setDestinationEmail","autoFocus","tempTasksArr","destinationUser","filter","ownerOfTask","copyOfSharedTask","sharedTasks","task","from","splice","onShareTask","EditCardBlock","setEditedTask","editedTask","taskId","onEditTask","setIsEditing","onDelTask","emailOfSourceUser","sharedTask","index","isSharedTask","sharedTasksEdited","sharedEditTaskInd","sourceUser","sourceUserEditedTasks","map","ownTasks","isEditing","isSharing","shared","AddBtnBlock","onAddNewTask","taskText","setTaskText","FullList","setIsFullList","stopPropagation","key","tempUsersArr","tempUser","fetchTasksData","concat","isFullList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6227894d.chunk.js","sourcesContent":["const initialState = {\r\n  users: null,\r\n  isAuth: false,\r\n  currentUser: null,\r\n  isRegister: false\r\n};\r\n\r\nexport default function auth (state = initialState, action) {\r\n  switch(action.type) {\r\n    case 'SET_IS_REGISTER':\r\n      return {\r\n        ...state,\r\n        isRegister: action.isRegister\r\n      }\r\n    case 'FETCH_DATA':\r\n      return {\r\n        ...state,\r\n        users: action.users\r\n      }\r\n    case 'REG_NEW_USER':\r\n      return {\r\n        ...state,\r\n        users: action.users,\r\n        isRegister: action.isRegister\r\n      }\r\n    case 'LOGIN_USER':\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload,\r\n        isAuth: action.isAuth\r\n      }\r\n    case 'LOGOUT_USER':\r\n      return {\r\n        ...state,\r\n        isAuth: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const initialState = {\r\n  currentTasks: null\r\n};\r\n\r\nexport default function taskList (state = initialState, action) {\r\n  switch(action.type) {\r\n    case 'FETCH_TASK_DATA':\r\n      return {\r\n        ...state,\r\n        currentTasks: action.tasks\r\n      }\r\n    case 'ADD_TASK':\r\n      return {\r\n        ...state,\r\n        currentTasks: action.tasks\r\n      }\r\n    case 'DEL_TASK':\r\n      return {\r\n        ...state,\r\n        currentTasks: action.tasks\r\n      }\r\n    case 'EDIT_TASK':\r\n      return {\r\n        ...state,\r\n        currentTasks: action.tasks\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport auth from './auth';\r\nimport taskList from './task-list';\r\n\r\nexport default combineReducers({\r\n  auth,\r\n  taskList\r\n});","import { createStore } from 'redux';\r\n\r\nimport reducers from './reducers';\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\r\n\r\nconst AuthTitle = ({ isRegister }) => {\r\n  return (\r\n    <div className='auth__title'>\r\n      <legend>{!isRegister ? 'Login' : 'Registration'}</legend>\r\n      <span>{!isRegister ? 'Login to your account' : \"Create your account. It's free ;)\"}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthTitle;\r\n","import React from 'react';\r\nimport { notification, Icon } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst Message = props => {\r\n  return <h3 style={{ color: props.color }}>{props.message}</h3>;\r\n};\r\n\r\nexport const openNotification = (message, descr, isSuccess) => {\r\n  notification.open({\r\n    message: <Message message={message} color={isSuccess ? '#00b200' : '#E51616'} />,\r\n    description: descr,\r\n    duration: 4,\r\n    icon: <Icon type={isSuccess ? 'smile' : 'frown'} style={{ color: isSuccess ? '#00b200' : '#E51616' }} />\r\n  });\r\n};\r\n","export const getParsedUsers = () => {\r\n  const users = localStorage.getItem('users');\r\n  return JSON.parse(users);\r\n};","import React from 'react';\r\n\r\nconst AuthBtn = props => {\r\n  const { isRegister, loginText, password, confPassword, setLoginText, setPassword, setConfPassword, setValidatingField, setIsRegister, login, regNewUser } = props;\r\n  return isRegister ? (\r\n    <button\r\n      onClick={event => regNewUser(event, loginText, password, confPassword, setLoginText, setPassword, setConfPassword, setValidatingField, setIsRegister)}\r\n      className='auth__actions-submit-btn'\r\n    >\r\n      register\r\n    </button>\r\n  ) : (\r\n    <button onClick={event => login(event, loginText, password, setLoginText, setPassword)} className='auth__actions-submit-btn'>\r\n      login\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AuthBtn;\r\n","import React from 'react';\r\n\r\nconst AuthSwitchBtn = ({ setIsRegister, isRegister }) => {\r\n  return (\r\n    <button\r\n      onClick={e => {\r\n        setIsRegister(isRegister, e);\r\n      }}\r\n      className='auth__actions-switch-btn'\r\n    >\r\n      {!isRegister ? 'Sign up' : 'I have an account. Go to login page'}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AuthSwitchBtn;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { regNewUser, fetchData, loginUser, setIsRegister } from '../../../../actions';\r\n\r\nimport AuthBtn from '../auth-btn';\r\nimport AuthSwitchBtn from '../auth-switch-btn';\r\n\r\nconst AuthFields = props => {\r\n  const [loginText, setLoginText] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confPassword, setConfPassword] = useState('');\r\n  const [validatingField, setValidatingField] = useState(null);\r\n\r\n  // fetching data in componentDidMount lifecycle phase\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const { isRegister, fetchData, login, setIsRegister, regNewUser } = props;\r\n  return (\r\n    <fieldset className='auth__actions'>\r\n      <label className={validatingField === 1 ? 'required-message' : validatingField === 4 ? 'invalid-email' : null}>\r\n        <span>E-mail:</span>\r\n        <input onChange={e => setLoginText(e.target.value)} value={loginText} type='email' placeholder='E-mail...' />\r\n      </label>\r\n      <label className={validatingField === 2 ? 'required-message' : null}>\r\n        <span>Password:</span>\r\n        <input onChange={e => setPassword(e.target.value)} value={password} type='password' placeholder='Password...' />\r\n      </label>\r\n      {isRegister && (\r\n        <label className={validatingField === 3 ? 'required-message' : null}>\r\n          <span>Confirm password:</span>\r\n          <input onChange={e => setConfPassword(e.target.value)} value={confPassword} type='password' placeholder='Password...' />\r\n        </label>\r\n      )}\r\n      <AuthBtn\r\n        isRegister={isRegister}\r\n        regNewUser={regNewUser}\r\n        loginText={loginText}\r\n        password={password}\r\n        confPassword={confPassword}\r\n        setLoginText={setLoginText}\r\n        setPassword={setPassword}\r\n        setConfPassword={setConfPassword}\r\n        setValidatingField={setValidatingField}\r\n        setIsRegister={setIsRegister}\r\n        login={login}\r\n      />\r\n      <AuthSwitchBtn setIsRegister={setIsRegister} isRegister={isRegister} />\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setIsRegister: (isRegister, e) => dispatch(setIsRegister(isRegister, e)),\r\n    regNewUser: (login, password, confPassword, event, setLogin, setPassword, setConfPassword, setValidatingField, setIsRegister) =>\r\n      dispatch(regNewUser(login, password, confPassword, event, setLogin, setPassword, setConfPassword, setValidatingField, setIsRegister)),\r\n    fetchData: () => dispatch(fetchData()),\r\n    login: (event, login, password, setLogin, setPassword) => dispatch(loginUser(event, login, password, setLogin, setPassword))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(AuthFields);\r\n","import store from '../store';\r\nimport { openNotification } from '../helpers/notification';\r\nimport { getParsedUsers } from '../helpers/data/get-parsed-users';\r\nimport { regValidate } from '../helpers/data/reg-validation';\r\n\r\nexport const fetchData = () => {\r\n  return {\r\n    type: 'FETCH_DATA',\r\n    users: getParsedUsers()\r\n  };\r\n};\r\n\r\nexport const setIsRegister = (isRegister, event) => {\r\n  event.preventDefault();\r\n  return {\r\n    type: 'SET_IS_REGISTER',\r\n    isRegister: !isRegister\r\n  };\r\n};\r\n\r\nexport const regNewUser = (event, login, password, confPassword, setLogin, setPassword, setConfPassword, setValidatingField) => {\r\n  const state = store.getState();\r\n\r\n  event.preventDefault();\r\n\r\n  // discard password input fields\r\n  setPassword('');\r\n  setConfPassword('');\r\n\r\n  // make empty temporary empty array bcs Redux doesn't love when we change state directly\r\n  let tempArr = [];\r\n  // get data from LocalStorage\r\n  const parsedData = getParsedUsers();\r\n\r\n  let haveThisLogin;\r\n\r\n  const lastUserId = parsedData !== null ? state.auth.users[state.auth.users.length - 1].id : 0;\r\n\r\n  // check if user already exists in system\r\n  parsedData !== null && parsedData.forEach(item => (haveThisLogin = item.login === login && true));\r\n\r\n  // initialize newUser\r\n  const newUser = { id: lastUserId + 1, login: login, password: password };\r\n\r\n  // get users from state if anyone exists\r\n  if (state.auth.users !== null) {\r\n    tempArr = [...state.auth.users];\r\n  }\r\n\r\n  // check if fields validated success\r\n  const isValid = regValidate(login, password, confPassword, haveThisLogin, setValidatingField, openNotification, setLogin);\r\n  if (isValid) {\r\n    // set to LocalStorage updated array with users\r\n    tempArr.push(newUser);\r\n    localStorage.setItem('users', JSON.stringify(tempArr));\r\n  }\r\n\r\n  return {\r\n    type: 'REG_NEW_USER',\r\n    users: tempArr.length !== 0 ? tempArr : state.auth.users,\r\n    isRegister: isValid ? false : true\r\n  };\r\n};\r\n\r\nexport const loginUser = (event, login, password, setLogin, setPassword) => {\r\n  event.preventDefault();\r\n  const state = store.getState();\r\n\r\n  // set current user\r\n  let currentUser;\r\n  if (state.auth.users !== null) {\r\n    state.auth.users.forEach(user => {\r\n      if(user.login === login && user.password === password) {\r\n        currentUser = { ...user }\r\n      }\r\n    });\r\n  }\r\n  \r\n  // validate login fields\r\n  if (!currentUser) {\r\n    openNotification('Error!', 'Invalid login or password', false);\r\n    setPassword('');\r\n  } else {\r\n    openNotification('Success!', 'You logged in. Welcome!', true);\r\n    setLogin('');\r\n    setPassword('');\r\n  }\r\n\r\n  return {\r\n    type: 'LOGIN_USER',\r\n    payload: currentUser,\r\n    isAuth: currentUser ? true : false\r\n  };\r\n};\r\n","export const regValidate = (login, password, confPassword, haveThisLogin, setValidatingField, openNotification, setLogin) => {\r\n  // validate e-mail input\r\n  const isValidEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(login);\r\n// validate input fields with adding the flag which set the error class\r\nlogin === ''\r\n? setValidatingField(1)\r\n: password === ''\r\n? setValidatingField(2)\r\n: confPassword === ''\r\n? setValidatingField(3)\r\n: !isValidEmail\r\n? setValidatingField(4)\r\n: setValidatingField(null);\r\n\r\n// deeper validate input fields\r\nif (password !== confPassword && password !== '' && confPassword !== '' && login !== '' && isValidEmail) {\r\nopenNotification('Error!', 'Type the identical passwords please', false);\r\nreturn false\r\n} else if (password.length < 6 && password === confPassword && password !== '' && confPassword !== '' && login !== '') {\r\nopenNotification('Error!', 'Password requires 6 or more characters', false);\r\nreturn false\r\n} else if (haveThisLogin) {\r\nopenNotification('Error!', 'This login already exists', false);\r\nreturn false\r\n} else if (password !== '' && confPassword !== '' && login !== '' && isValidEmail) {\r\nopenNotification('Success!', 'Thank you for registration! Now you can login in system.', true);\r\nsetLogin('');\r\nreturn true\r\n}\r\n\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './auth.sass';\r\nimport AuthTitle from './components/auth-title';\r\nimport AuthFields from './components/auth-fields';\r\n\r\nconst Auth = ({ isRegister }) => {\r\n  return (\r\n    <form className='auth'>\r\n      <AuthTitle isRegister={isRegister} />\r\n      <AuthFields isRegister={isRegister} />\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isRegister: state.auth.isRegister\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Auth);\r\n","import React from 'react';\r\nimport { Icon } from 'antd';\r\n\r\nimport './log-out.sass';\r\n\r\nconst LogOut = ({ logOut, name }) => {\r\n  return (\r\n    <div className='log-out'>\r\n      <span className='log-out__name'>{name}</span>\r\n      <Icon onClick={() => logOut()} className='log-out__icon' type='logout' size='large' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogOut;\r\n","import React from 'react';\r\nimport { Icon } from 'antd';\r\n\r\nimport './share-task-block.sass';\r\nimport { onShareTask } from '../../../../helpers/data/share';\r\n\r\nconst ShareTaskBlock = props => {\r\n  const { label, userId, taskIndex, setIsSharing, destinationEmail, setDestinationEmail } = props;\r\n  return (\r\n    <div className='share-block-wrapper'>\r\n      <div className='share-block'>\r\n        <h2>share task</h2>\r\n        <span>\r\n          User e-mail for share <span>\"{label}\"</span> task:\r\n        </span>\r\n        <input onChange={e => setDestinationEmail(e.target.value)} value={destinationEmail} placeholder='E-mail...' autoFocus />\r\n        <button onClick={() => onShareTask(destinationEmail, userId, taskIndex, setDestinationEmail, setIsSharing, label)}>SHARE</button>\r\n        <Icon onClick={() => setIsSharing(false)} className='share-block__close-btn' type='close' />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShareTaskBlock;\r\n","import { openNotification } from '../notification';\r\nimport { getParsedUsers } from '../data/get-parsed-users';\r\n\r\nexport const onShareTask = (destinationEmail, userId, taskIndex, setDestinationEmail, setIsSharing, label) => {\r\n  // discard e-mail input value\r\n  setDestinationEmail('');\r\n\r\n  const parsedData = getParsedUsers();\r\n\r\n  // make copy of tasks array(Redux rules)\r\n  const tempTasksArr = parsedData[userId - 1].tasks;\r\n\r\n  // find destination and owner user\r\n  const destinationUser = parsedData.filter(user => user.login === destinationEmail);\r\n  const ownerOfTask = parsedData.filter(user => user.id === userId);\r\n\r\n  // validate e-mail input\r\n  const isValidEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(destinationEmail);\r\n  \r\n  // check if destination user is already have current task. If true - task is not share\r\n  let copyOfSharedTask = [];\r\n  parsedData.forEach(user => {\r\n    if (user.login === destinationEmail && user.sharedTasks) {\r\n      copyOfSharedTask = user.sharedTasks && tempTasksArr[taskIndex] && user.sharedTasks.filter(task => task.task &&\r\n         task.task.id === tempTasksArr[taskIndex].id &&\r\n          task.task.label === tempTasksArr[taskIndex].label && task);\r\n    }\r\n  });\r\n\r\n  // check if destination user have shared tasks\r\n  if (destinationUser.length !== 0) {\r\n    if (!destinationUser[0].sharedTasks && isValidEmail) {\r\n      destinationUser[0].sharedTasks = [];\r\n    }\r\n  }\r\n\r\n  // validate sharing feature\r\n  if (destinationEmail.length > 0 && isValidEmail && destinationUser.length !== 0 && destinationUser[0].login !== ownerOfTask[0].login && copyOfSharedTask.length === 0) {\r\n    destinationUser[0].sharedTasks.push({ from: parsedData[userId - 1].login, task: tempTasksArr[taskIndex] });\r\n    parsedData.splice(destinationUser[0].id - 1, 1, destinationUser[0]);\r\n    localStorage.setItem('users', JSON.stringify(parsedData));\r\n    openNotification('Success!', `Task >> ${label} << shared successfully`, true);\r\n    setIsSharing(false);\r\n  } else if (destinationUser.length === 0 && isValidEmail) {\r\n    openNotification('Error!', 'User is not register in system', false);\r\n  } else if (!isValidEmail) {\r\n    openNotification('Error!', 'Invalid e-mail format', false);\r\n  } else if (destinationUser[0].login === ownerOfTask[0].login) {\r\n    openNotification('Error!', 'Task can not shared for self!', false);\r\n  } else if (copyOfSharedTask.length !== 0) {\r\n    openNotification('Error!', 'This task already shared with this user', false);\r\n  } else if (destinationEmail.length === 0) {\r\n    openNotification('Error!', 'Please type the user email address for share', false);\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nconst EditCardBlock = props => {\r\n  const { setEditedTask, editedTask, label, taskIndex, userId, taskId, onEditTask, setIsEditing } = props;\r\n  return (\r\n    <div className='task-list__tasks-item-edit-block'>\r\n      <input onChange={e => setEditedTask(e.target.value)} value={editedTask || label} autoFocus />\r\n      <button onClick={() => onEditTask(taskIndex, userId, taskId, editedTask, setIsEditing)}>OK</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditCardBlock;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Icon } from 'antd';\r\n\r\nimport './card.sass';\r\nimport { onDelTask, onEditTask } from '../../../../actions';\r\n\r\nimport ShareTaskBlock from '../share-task-block';\r\nimport EditCardBlock from '../edit-card-block';\r\n\r\nconst Card = props => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [isSharing, setIsSharing] = useState(false);\r\n  const [editedTask, setEditedTask] = useState(null);\r\n  const [destinationEmail, setDestinationEmail] = useState('');\r\n\r\n  const { label, taskIndex, userId, taskId, onEditTask, shared, onDelTask } = props;\r\n  return (\r\n    <li className='task-list__tasks-item'>\r\n      {isEditing ? (\r\n        <EditCardBlock\r\n          setEditedTask={setEditedTask}\r\n          editedTask={editedTask}\r\n          label={label}\r\n          taskIndex={taskIndex}\r\n          userId={userId}\r\n          taskId={taskId}\r\n          onEditTask={onEditTask}\r\n          setIsEditing={setIsEditing}\r\n        />\r\n      ) : (\r\n        <div>\r\n          <span className='task-list__tasks-item-label'>{label}</span>\r\n          {isSharing && (\r\n            <ShareTaskBlock\r\n              label={label}\r\n              setIsSharing={setIsSharing}\r\n              taskIndex={taskIndex}\r\n              userId={userId}\r\n              destinationEmail={destinationEmail}\r\n              setDestinationEmail={setDestinationEmail}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n      {shared ? (\r\n        <span className='task-list__tasks-item-shared'>shared</span>\r\n      ) : (\r\n        <Icon onClick={() => setIsSharing(!isSharing)} className='task-list__tasks-item-share-btn' type='share-alt' />\r\n      )}\r\n      <Icon onClick={() => setIsEditing(!isEditing)} className='task-list__tasks-item-edit-btn' type='edit' />\r\n      <Icon onClick={() => onDelTask(taskIndex, userId)} className='task-list__tasks-item-del-btn' type='delete' />\r\n    </li>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    userId: state.auth.currentUser.id\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDelTask: (taskIndex, userId) => dispatch(onDelTask(taskIndex, userId)),\r\n    onEditTask: (taskIndex, userId, taskId, editedTask, setIsEditing) => dispatch(onEditTask(taskIndex, userId, taskId, editedTask, setIsEditing))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Card);\r\n","import store from '../store';\r\nimport { getParsedUsers } from '../helpers/data/get-parsed-users';\r\n\r\nexport const fetchTasksData = userId => {\r\n  \r\n  // get parsed users\r\n  const parsedData = getParsedUsers();\r\n\r\n  // check if current user have shared tasks and if true - concat shared tasks array and tasks array\r\n  return {\r\n    type: 'FETCH_TASK_DATA',\r\n    tasks:\r\n      parsedData !== null && parsedData[userId - 1].sharedTasks && !parsedData[userId - 1].tasks\r\n        ? parsedData[userId - 1].sharedTasks\r\n        : parsedData !== null && parsedData[userId - 1].sharedTasks && parsedData[userId - 1].tasks\r\n        ? parsedData[userId - 1].sharedTasks.concat(parsedData[userId - 1].tasks)\r\n        : parsedData !== null\r\n        ? parsedData[userId - 1].tasks\r\n        : []\r\n  };\r\n};\r\n\r\nexport const onAddNewTask = (userId, taskText, setTaskText) => {\r\n  const state = store.getState();\r\n\r\n  // discard add task input value\r\n  setTaskText('');\r\n\r\n  // make copy of current tasks (Redux rules) if the current tasks array not empty\r\n  let tempTasksArr = state.taskList.currentTasks != null ? [...state.taskList.currentTasks] : [];\r\n\r\n  // get only user's tasks (without shared)\r\n  const tasks = tempTasksArr.filter(task => !task.from && task);\r\n\r\n  // make copy of users array\r\n  const tempUsersArr = [...state.auth.users];\r\n\r\n  // find current user\r\n  const tempUser = { ...state.auth.users[userId - 1] };\r\n\r\n  // validate new task text input\r\n  if (taskText !== '') {\r\n    // push new task to only tasks array and push to temp tasks array with shared tasks for Redux\r\n    tasks.push({ id: tempTasksArr.length > 0 ? tempTasksArr[tempTasksArr.length - 1].id + 1 : 1, label: taskText });\r\n    tempTasksArr.push({ id: tempTasksArr.length > 0 ? tempTasksArr[tempTasksArr.length - 1].id + 1 : 1, label: taskText });\r\n    tempUsersArr.splice(userId - 1, 1, tempUser);\r\n\r\n    // redefine tasks key of user\r\n    tempUser.tasks = tasks;\r\n\r\n    // set updated users array to Local Storage\r\n    localStorage.setItem('users', JSON.stringify(tempUsersArr));\r\n  }\r\n\r\n  return {\r\n    type: 'ADD_TASK',\r\n    tasks: tempTasksArr\r\n  };\r\n};\r\n\r\nexport const onDelTask = (taskIndex, userId) => {\r\n  const state = store.getState();\r\n\r\n  // get parsed users from Local Storage\r\n  const parsedData = getParsedUsers();\r\n\r\n  // copy current tasks\r\n  let tempTasksArr = [...state.taskList.currentTasks];\r\n\r\n  // get owner of task login if removing shared task\r\n  const emailOfSourceUser = tempTasksArr[taskIndex].from;\r\n \r\n  // delete task from LS tasks array or from LS source user shared tasks array if removing shared task\r\n  parsedData.forEach(user => {\r\n    if(user.id === userId && user.sharedTasks) {\r\n      user.sharedTasks.forEach((sharedTask, index) => sharedTask.id === tempTasksArr[taskIndex].id && user.sharedTasks.splice(index, 1))\r\n    } else if (user.login === emailOfSourceUser && !user.sharedTasks) {\r\n      user.tasks.forEach((task, index) => tempTasksArr[taskIndex].task.id === task.id && tempTasksArr[taskIndex].task.label === task.label && user.tasks.splice(index, 1))\r\n    }\r\n  })\r\n\r\n  // update tasks array for Redux\r\n  tempTasksArr.splice(taskIndex, 1);\r\n  // update tasks array for LS\r\n  parsedData[userId - 1].tasks = tempTasksArr;\r\n\r\n  // set updated users array to LS\r\n  localStorage.setItem('users', JSON.stringify(parsedData));\r\n\r\n  return {\r\n    type: 'DEL_TASK',\r\n    tasks: tempTasksArr\r\n  };\r\n};\r\n\r\nexport const onEditTask = (taskIndex, userId, taskId, editedTask, setIsEditing) => {\r\n  const state = store.getState();\r\n\r\n  // delete from html edit block\r\n  setIsEditing(false);\r\n\r\n  // get parsed users from LS\r\n  const parsedData = getParsedUsers();\r\n\r\n  // copy current tasks array (Redux rules)\r\n  const tempTasksArr = [...state.taskList.currentTasks];\r\n\r\n  // get login of source user if current task is shared\r\n  const emailOfSourceUser = tempTasksArr[taskIndex].from;\r\n\r\n  let isSharedTask = !!emailOfSourceUser;\r\n\r\n  // edit get shared tasks array of user for update in LS if editing shared task\r\n  const sharedTasksEdited = parsedData[userId - 1].sharedTasks && [...parsedData[userId - 1].sharedTasks];\r\n\r\n  // check if editing shared task\r\n  if (isSharedTask) {\r\n    // get source user\r\n    const sourceUser = parsedData.filter(user => user.login === emailOfSourceUser);\r\n    \r\n    // update users array with new editing list of tasks of source user\r\n    const sourceUserEditedTasks = isSharedTask && sourceUser[0].tasks.map(task => (task.id === taskId ? { id: task.id, label: editedTask } : task));\r\n    parsedData[sourceUser[0].id - 1].tasks = sourceUserEditedTasks;\r\n\r\n    // update users array with new iditing list of task of user\r\n    let sharedEditTaskInd;\r\n    sharedTasksEdited.forEach((task, index) => (sharedEditTaskInd = task.task.id === taskId && index));\r\n    sharedTasksEdited.splice(sharedEditTaskInd, 1, { from: emailOfSourceUser, task: { id: taskId, label: editedTask } });\r\n    parsedData[userId - 1].sharedTasks = sharedTasksEdited;\r\n\r\n    // update tasks array for Redux\r\n    tempTasksArr.splice(taskIndex, 1, { from: emailOfSourceUser, task: { id: taskId, label: editedTask } });\r\n  } else {\r\n    // update tasks array for Redux\r\n    tempTasksArr.splice(taskIndex, 1, { id: taskId, label: editedTask });\r\n\r\n    // update users array with new iditing list of task of user\r\n    const ownTasks = tempTasksArr.filter(task => !task.from && task);\r\n    parsedData[userId - 1].tasks = ownTasks;\r\n  }\r\n\r\n  // set updated users array to LS\r\n  localStorage.setItem('users', JSON.stringify(parsedData));\r\n\r\n  return {\r\n    type: 'EDIT_TASK',\r\n    tasks: tempTasksArr\r\n  };\r\n};\r\n","import React from 'react';\r\n\r\nconst AddBtnBlock = ({ onAddNewTask, userId, taskText, setTaskText }) => {\r\n  return ( \r\n    <div className='task-list__add-block'>\r\n          <input onChange={e => setTaskText(e.target.value)} value={taskText} placeholder='New task...' />\r\n          <button onClick={() => onAddNewTask(userId, taskText, setTaskText)}>ADD</button>\r\n        </div>\r\n      \r\n   );\r\n}\r\n \r\nexport default AddBtnBlock;","import React from 'react';\r\nimport { Empty, Icon } from 'antd';\r\n\r\nimport './full-list.sass';\r\n\r\nconst FullList = ({ setIsFullList, tasks }) => {\r\n  return (\r\n    <div onClick={() => setIsFullList(false)} className='full-list'>\r\n      <div onClick={e => e.stopPropagation()} className='full-list__inner'>\r\n        <h2 className='full-list__title'>Full list of tasks</h2>\r\n        <div className='full-list__total-count'>\r\n          Number of tasks:<b>{tasks && tasks.length ? tasks.length : '0'}</b>\r\n        </div>\r\n        {tasks && tasks.length > 0 ? (\r\n          <ul>\r\n            {tasks.map((task, taskIndex) => {\r\n              return (\r\n                <li className='full-list__item' key={taskIndex}>\r\n                  <div className='full-list__item-label'>{task.from ? task.task.label : task.label}</div>\r\n                  <div className='full-list__item-from'>\r\n                    {task.from ? <span>from:</span> : null} {task.from ? <span>{task.from}</span> : null}\r\n                  </div>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        ) : (\r\n          <Empty className='full-list__no-data' />\r\n        )}\r\n\r\n        <Icon onClick={() => setIsFullList(false)} className='full-list__close-btn' type='close' />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FullList;\r\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Icon, Empty } from 'antd';\n\nimport './task-list.sass';\nimport { onAddNewTask, fetchTasksData } from '../../actions';\n\nimport LogOut from './components/log-out';\nimport Card from './components/card';\nimport AddBtnBlock from './components/add-btn-block';\nimport FullList from './components/full-list';\n\nconst TaskList = props => {\n  const [taskText, setTaskText] = useState('');\n  const [isFullList, setIsFullList] = useState(false);\n\n  // fetching data in componentDidMount cycle\n  useEffect(() => {\n    fetchTasksData(userId);\n  }, []);\n\n  const { fetchTasksData, userId, tasks, onAddNewTask, logOut, name } = props;\n  return (\n    <div className='task-list'>\n      <div className='task-list-inner'>\n        <h1 className='task-list__title'>Task list</h1>\n        <Icon onClick={() => setIsFullList(true)} className='task-list__list-btn' type='unordered-list' />\n        <ul className='task-list__tasks'>\n          {tasks ?\n            tasks.map((task, taskIndex) => {\n              return (\n                <Card\n                  shared={task.from ? true : false}\n                  label={task.from ? task.task.label : task.label}\n                  from={task.from || null}\n                  taskIndex={taskIndex}\n                  userId={userId}\n                  taskId={task.from ? task.task.id : task.id}\n                  key={taskIndex}\n                />\n              );\n            })\n            :\n            <Empty className='task-list__empty' />}\n        </ul>\n        <AddBtnBlock taskText={taskText} setTaskText={setTaskText} userId={userId} onAddNewTask={onAddNewTask} />\n      </div>\n      {isFullList && <FullList tasks={tasks} setIsFullList={setIsFullList} />}\n      <LogOut name={name} logOut={logOut} />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    name: state.auth.currentUser.login,\n    userId: state.auth.currentUser.id,\n    tasks: state.taskList.currentTasks\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logOut: () => dispatch({ type: 'LOGOUT_USER' }),\n    onAddNewTask: (userId, taskText, setTaskText) => dispatch(onAddNewTask(userId, taskText, setTaskText)),\n    fetchTasksData: userId => dispatch(fetchTasksData(userId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './task-list-app.sass';\r\n\r\nimport Auth from '../../modules/auth';\r\nimport TaskList from '../../modules/task-list';\r\n\r\nconst TaskListApp = props => {\r\n  return (\r\n    <div className='task-list-app'>\r\n      {props.isAuth ? <TaskList /> : <Auth />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(state => ({isAuth: state.auth.isAuth}))(TaskListApp);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport TaskListApp from './components/task-list-app';\n\nReactDOM.render(\n  <Provider store={store}>\n    <TaskListApp />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}